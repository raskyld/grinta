edition = "2023";

package grinta.v1alpha1;

import "google/protobuf/go_features.proto";
option features.(pb.go).api_level = API_OPAQUE;

option go_package = "github.com/raskyld/grinta/gen/grinta/v1alpha1;grintav1alpha1";

// Frame is the actual data transported over the QUIC streams.
message Frame {
  oneof type {
    InitFrame init = 1;
    bytes data = 2;
  }
}

// InitFrame is expected to be the first frame received when a stream is
// open.
message InitFrame {
  StreamMode mode = 1;
  string dest_name = 2;
}

// StreamMode describes whether a stream is used for internal
// purpose or if it directly maps to a user flow.
enum StreamMode {
  STREAM_MODE_UNSPECIFIED = 0;
  STREAM_MODE_GOSSIP = 1;
  STREAM_MODE_FLOW = 2;
}

// NameClaim is an event representing the claim of a node over a name.
message NameClaim {
  string endpoint_name = 1;
  string node_name = 2;
  uint64 rev = 3;
  NameClaimMode mode = 5;
}

enum NameClaimMode {
  NAME_CLAIM_MODE_UNSPECIFIED = 0;
  NAME_CLAIM_MODE_CLAIM = 1;
  NAME_CLAIM_MODE_UNCLAIM = 2;
}

message NameOwnershipQuery {
  string endpoint_name = 1;
}

message NameOwnershipResponse {
  NameClaim claim = 1;
}
